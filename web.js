(()=>{"use strict";let t="https://matthewsalaway.pythonanywhere.com/";async function n(n){n.url_data=globalThis.url_data,console.log("Data"),"study_id"in n.url_data||(n.url_data.study_id="demo_study"),"prolific_id"in n.url_data||(n.url_data.prolific_id="demo_user"),"session_id"in n.url_data||(n.url_data.session_id="demo_session"),n.url_data.queue_id=globalThis.uid,console.log("logged",n),console.log("Logging to",t+"log");try{let e=await $.ajax(t+"log",{data:JSON.stringify({project:"ocr-calibration-study/"+n.url_data.study_id,uid:globalThis.uid+"_"+n.url_data.prolific_id,payload:JSON.stringify(n)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),e}catch(t){console.log(t)}}var e=!1,i=[];let o=null,a=-1,r=0,s=0,l=20,d=0,_=0,u=0,c=0,h=0;function p(){const t=$("input[name='latexExperience']:checked").val(),n=$("input[name='latexFrequency']:checked").val(),e=$("input[name='chatbotFrequency']:checked").val();return t&&n&&e?($("#button_instructions_next").show(),!0):($("#button_instructions_next").hide(),!1)}function b(t){c+=t,0==c?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),4!=c||p()?($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show()):($("#button_instructions_next").attr("disabled","true"),$("#button_instructions_next").hide()),c>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==c&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),m()),$("#main_box_instructions").children(":not(input)").each(((t,n)=>{$(n).hide()})),$(`#instructions_${c}`).show()}function g(t){return 2!=t?t==1-o.prediction_is_correct?1:0:-1}function m(){if($("#main_box_experiment").show(),$("#button_next").hide(),$("#button_quit").hide(),console.log("question index, condition index",_,d),d>=i.length)return $("#main_box_experiment").hide(),void $("#qualitative_section").show();let t=i[d];if(console.log("Condition block",t),console.log(i),0===_)return n=t.condition,$("#main_box_experiment").hide(),$("#start_condition_page").empty().show(),$("#start_condition_page").append("<h2>Start "+n+"</h2>"),$("#start_condition_page").append("<input id='start_condition_next' type='button' value='Next'>"),void $("#start_condition_next").on("click",(()=>{$("#start_condition_page").hide(),_=1,m()}));var n;if(_>t.questions.length)return void function(){$("#main_box_experiment").hide();const t=i[d].condition;$("#condition_label").text(t),$("#mental_demand").val("0"),$("#hurried_demand").val("0"),$("#performance").val("0"),$("#effort").val("0"),$("#frustration").val("0"),$("#nasa_tlx_survey").show()}(t.condition);o=t.questions[_-1],console.log("Question",_,o),o.image?$("#question_image").attr("src","data:image/png;base64,"+o.image):$("#question_image").attr("src","");let e="";o.token_info&&Array.isArray(o.token_info)&&(e=o.token_info.filter((t=>"<|im_end|>"!==t.token)).map((t=>{let n=t.token.replace(/Ġ/g," "),e=1-(t.top_5_tokens&&t.top_5_tokens[0]&&"number"==typeof t.top_5_tokens[0].probability?t.top_5_tokens[0].probability:1);return 1==o.is_highlighted?`<span style="background-color: rgba(255, 0, 0, ${e});">${n}</span>`:n})).join("")),$("#predicted_text").html(e);let a="";o.token_info&&Array.isArray(o.token_info)&&(a=o.token_info.map((t=>t.token)).filter((t=>"<|im_end|>"!==t)).map((t=>t.replace(/Ġ/g," "))).join("")),$("#token_input").val(a),$("#progress").text(`Section ${d+1} of ${i.length} | Question ${_} of ${t.questions.length}`),$("#part1").show(),$("#part2").hide(),$("#token_input_container").hide(),$("#button_next_part1").hide(),clearTimeout(r),r=window.setTimeout(y,2e4),l=20,$("#timer").text(l),$("#timer").show(),s&&clearInterval(s),s=window.setInterval((()=>{l-=1,$("#timer").text(l),l<=15&&($("#token_input_container").show(),$("#button_next_part1").show()),l<=0&&(clearInterval(s),y(),$("#timer").hide())}),1e3)}$("#button_instructions_next").on("click",(()=>b(1))),$("#button_instructions_prev").on("click",(()=>b(-1))),$("#button_next").on("click",(()=>{let t=u;if(-1==1-o.prediction_is_correct&&(u+=.1),_>0){let e={question_i:_,user_selections:{answeronly:-1,withexplanation:-1,withexplanationquality:-1},user_is_correct:{answeronly:g(-1),withexplanation:g(-1),withexplanationquality:g(-1)},balance:{old:t,new:u}};e.question=o,e.count_exited_page=h,n(e),h=0}m()}));const x=new URLSearchParams(window.location.search),w=x.get("start"),f=x.get("uid");if(globalThis.url_data=function(t){const n={};for(const[e,i]of t)n[e]=i;return n}(x.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=f){if(globalThis.uid=f,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${x.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(e=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{i=t,null!=w&&(_=parseInt(w)-1,console.log("Starting from",_)),b(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let v=!1;function y(){clearInterval(s),$("#timer").hide(),$("#part1").hide(),$("#part2").show()}document.onvisibilitychange=()=>{v||(h+=1,v=!0,v=!1)},$(document).ready((()=>{$("#button_next_part1").on("click",(()=>{clearTimeout(r),$("#timer").hide(),$("#part1").hide(),$("#part2").show()})),$(".confidence-button").on("click",(function(){let t=parseInt($(this).attr("data-rating"));$(".confidence-button").removeClass("selected"),$(this).addClass("selected"),a=t,$("#button_next_part2").removeAttr("disabled")})),$("#button_next_part2").on("click",(()=>{n({question_i:_,condition_i:d,confidence_rating:a}),$("#button_next_part2").attr("disabled","true"),$(".confidence-button").removeClass("selected"),a=-1,$("#part2").hide(),$("#part1").show(),_++,m()})),$("input[name='latexExperience'], input[name='latexFrequency'], input[name='chatbotFrequency']").on("change",(()=>{p()&&($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show())})),$("#token_input").on("input",(function(){let t=$(this).val();console.log("User input:",t)})),$("#nasa_tlx_next").on("click",(()=>{const t={mental_demand:$("#mental_demand").val(),hurried_demand:$("#hurried_demand").val(),performance:$("#performance").val(),effort:$("#effort").val(),frustration:$("#frustration").val()};n({condition:$("#condition_label").text(),tlx:t}),$("#nasa_tlx_survey").hide(),d++,_=0,m()}))})),$("#qual_next").on("click",(()=>{const t=$("#qual_q1").val()||"",o=$("#qual_q2").val()||"",a=$("#qual_q3").val()||"";let r=!0;t.length<25?($("#warn_q1").show(),r=!1):$("#warn_q1").hide(),o.length<25?($("#warn_q2").show(),r=!1):$("#warn_q2").hide(),a.length<0?($("#warn_q3").show(),r=!1):$("#warn_q3").hide(),r&&(n({qualitative:{q1:t,q2:o,q3:a}}),$("#qualitative_section").hide(),e?($("#reward_box_mock").text(`Your total reward is $${u.toFixed(2)} (${i.length*i[0].length} questions answered) + $2.`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${u.toFixed(2)} (${i.length*i[0].length} questions answered) + $2.`),$("#reward_box").show(),$("#main_box_end").show()))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsb0JBQW9Ca0QsT0FDakNvRSxJQUFLTixJQUlQaEgsRUFBRSxvQkFBb0I4QixPQUV0QlgsSUFDQUMsRUFBdUIsRUFDdkJlLEdBQWUsR0FDZixJQWFSbkMsRUFBRSxjQUFjK0MsR0FBRyxTQUFTLEtBQ3hCLE1BQU13RSxFQUFNdkgsRUFBRSxZQUFZMEIsT0FBb0IsR0FDeEM4RixFQUFNeEgsRUFBRSxZQUFZMEIsT0FBb0IsR0FDeEMrRixFQUFNekgsRUFBRSxZQUFZMEIsT0FBb0IsR0FFOUMsSUFBSWdHLEdBQVEsRUFFUkgsRUFBRzdFLE9BQVMsSUFDWjFDLEVBQUUsWUFBWTZCLE9BQ2Q2RixHQUFRLEdBRVIxSCxFQUFFLFlBQVk4QixPQUdkMEYsRUFBRzlFLE9BQVMsSUFDWjFDLEVBQUUsWUFBWTZCLE9BQ2Q2RixHQUFRLEdBRVIxSCxFQUFFLFlBQVk4QixPQUdkMkYsRUFBRy9FLE9BQVMsR0FDWjFDLEVBQUUsWUFBWTZCLE9BQ2Q2RixHQUFRLEdBRVIxSCxFQUFFLFlBQVk4QixPQUliNEYsSUFhTGxJLEVBUmtCLENBQ2RtSSxZQUFhLENBQ1RKLEdBQUlBLEVBQ0pDLEdBQUlBLEVBQ0pDLEdBQUlBLEtBT1p6SCxFQUFFLHdCQUF3QjhCLE9BQ3RCakIsR0FDQWIsRUFBRSxvQkFBb0JrRCxLQUFLLHlCQUF5QjdCLEVBQVF1RyxRQUFRLE9BQVFuSSxFQUFXLE9BQUlBLEVBQUssR0FBUyxvQ0FDekdPLEVBQUUsb0JBQW9CNkIsT0FDdEI3QixFQUFFLHNCQUFzQjZCLFNBRXhCN0IsRUFBRSxlQUFla0QsS0FBSyx5QkFBeUI3QixFQUFRdUcsUUFBUSxPQUFRbkksRUFBVyxPQUFJQSxFQUFLLEdBQVMsb0NBQ3BHTyxFQUFFLGVBQWU2QixPQUNqQjdCLEVBQUUsaUJBQWlCNkIsUSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb25uZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFVk1PREUgfSBmcm9tICcuL2dsb2JhbHMnXHJcbmltcG9ydCB7IE1PQ0tNT0RFIH0gZnJvbSAnLi9tYWluJ1xyXG5cclxubGV0IFNFUlZFUl9MT0dfUk9PVCA9IERFVk1PREUgPyBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9cIiA6IFwiaHR0cHM6Ly9tYXR0aGV3c2FsYXdheS5weXRob25hbnl3aGVyZS5jb20vXCJcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZF9kYXRhKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAvLyBpbmNsdWRlIHRpbWVzdGFtcCBzbyB0aGF0IHRoaW5ncyBkb24ndCBnZXQgY2FjaGVkXHJcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5nZXRKU09OKFxyXG4gICAgICAgIGBiYWtlZF9xdWV1ZXMvJHtnbG9iYWxUaGlzLnVpZH0uanNvbj90PSR7RGF0ZS5ub3coKX1gLFxyXG4gICAgKVxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dfZGF0YShkYXRhKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIC8vaWYgKE1PQ0tNT0RFKSB7XHJcbiAgICAvLyAgICBjb25zb2xlLmxvZyhcImxvZ2dlZCAobW9jaylcIiwgZGF0YSlcclxuICAgIC8vICAgIHJldHVyblxyXG4gICAgLy99XHJcbiAgICBcclxuICAgIGRhdGFbXCJ1cmxfZGF0YVwiXSA9IGdsb2JhbFRoaXMudXJsX2RhdGFcclxuICAgIGNvbnNvbGUubG9nKFwiRGF0YVwiKVxyXG4gICAgaWYgKCEoXCJzdHVkeV9pZFwiIGluIGRhdGFbJ3VybF9kYXRhJ10pKSB7XHJcbiAgICAgICAgZGF0YVsndXJsX2RhdGEnXVtcInN0dWR5X2lkXCJdID0gXCJkZW1vX3N0dWR5XCJcclxuICAgIH1cclxuICAgIGlmICghKFwicHJvbGlmaWNfaWRcIiBpbiBkYXRhWyd1cmxfZGF0YSddKSkge1xyXG4gICAgICAgIGRhdGFbJ3VybF9kYXRhJ11bXCJwcm9saWZpY19pZFwiXSA9IFwiZGVtb191c2VyXCJcclxuICAgIH1cclxuICAgIGlmICghKFwic2Vzc2lvbl9pZFwiIGluIGRhdGFbJ3VybF9kYXRhJ10pKSB7XHJcbiAgICAgICAgZGF0YVsndXJsX2RhdGEnXVtcInNlc3Npb25faWRcIl0gPSBcImRlbW9fc2Vzc2lvblwiXHJcbiAgICB9XHJcbiAgICBkYXRhW1widXJsX2RhdGFcIl1bXCJxdWV1ZV9pZFwiXSA9IGdsb2JhbFRoaXMudWlkXHJcbiAgICBjb25zb2xlLmxvZyhcImxvZ2dlZFwiLCBkYXRhKVxyXG4gICAgY29uc29sZS5sb2coXCJMb2dnaW5nIHRvXCIsIFNFUlZFUl9MT0dfUk9PVCArIFwibG9nXCIpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxyXG4gICAgICAgICAgICBTRVJWRVJfTE9HX1JPT1QgKyBcImxvZ1wiLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJvY3ItY2FsaWJyYXRpb24tc3R1ZHkvXCIrZGF0YVsndXJsX2RhdGEnXVsnc3R1ZHlfaWQnXSxcclxuICAgICAgICAgICAgICAgICAgICB1aWQ6IGdsb2JhbFRoaXMudWlkK1wiX1wiK2RhdGFbJ3VybF9kYXRhJ11bJ3Byb2xpZmljX2lkJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICAgYXdhaXQgc2xlZXAoMjAwMCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBERVZNT0RFIH0gZnJvbSBcIi4vZ2xvYmFsc1wiXHJcbmV4cG9ydCB2YXIgVUlEOiBzdHJpbmdcclxuZXhwb3J0IHZhciBNT0NLTU9ERTogYm9vbGVhbiA9IGZhbHNlXHJcbmltcG9ydCB7IGxvYWRfZGF0YSwgbG9nX2RhdGEgfSBmcm9tICcuL2Nvbm5lY3RvcidcclxuaW1wb3J0IHsgcGFyYW1zVG9PYmplY3QgfSBmcm9tIFwiLi91dGlsc1wiXHJcblxyXG52YXIgZGF0YTogYW55W10gPSBbXVxyXG5sZXQgcXVlc3Rpb246IGFueSA9IG51bGxcclxubGV0IHVzZXJzZWxlY3Rpb25fYW5zd2Vyb25seTogbnVtYmVyID0gLTFcclxubGV0IHVzZXJzZWxlY3Rpb25fd2l0aGV4cGxhbmF0aW9uOiBudW1iZXIgPSAtMVxyXG5sZXQgdXNlcnNlbGVjdGlvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5OiBudW1iZXIgPSAtMVxyXG5sZXQgY29uZmlkZW5jZVJhdGluZzogbnVtYmVyID0gLTE7XHJcbmxldCBwYXJ0MVRpbWVyOiBudW1iZXIgPSAwO1xyXG5sZXQgcGFydDFJbnRlcnZhbDogbnVtYmVyID0gMDtcclxubGV0IHJlbWFpbmluZ1RpbWU6IG51bWJlciA9IDIwO1xyXG5sZXQgY3VycmVudENvbmRpdGlvbkluZGV4ID0gMDtcclxubGV0IGN1cnJlbnRRdWVzdGlvbkluZGV4ID0gMDtcclxuXHJcblxyXG5cclxuXHJcbmxldCBiYWxhbmNlID0gMFxyXG5sZXQgYmFsYW5jZV9pbmNyZW1lbnQgPSAwLjEgICAgIC8vIEJhbGFuY2UgdXBkYXRlcyBieSAkMC4xMCBmb3IgZXZlcnkgY29ycmVjdCBzZWxlY3Rpb25cclxuXHJcbmxldCBpbnN0cnVjdGlvbl9pOiBudW1iZXIgPSAwXHJcbmxldCBjb3VudF9leGl0ZWRfcGFnZTogbnVtYmVyID0gMFxyXG5cclxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFjb25kaXRpb24pIHtcclxuICAgICAgICB0aHJvdyBtZXNzYWdlIHx8IFwiQXNzZXJ0aW9uIGZhaWxlZFwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1ByZVN1cnZleSgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGxhdGV4RXhwID0gJChcImlucHV0W25hbWU9J2xhdGV4RXhwZXJpZW5jZSddOmNoZWNrZWRcIikudmFsKCk7XHJcbiAgICBjb25zdCBsYXRleEZyZXEgPSAkKFwiaW5wdXRbbmFtZT0nbGF0ZXhGcmVxdWVuY3knXTpjaGVja2VkXCIpLnZhbCgpO1xyXG4gICAgY29uc3QgY2hhdGJvdEZyZXEgPSAkKFwiaW5wdXRbbmFtZT0nY2hhdGJvdEZyZXF1ZW5jeSddOmNoZWNrZWRcIikudmFsKCk7XHJcbiAgXHJcbiAgICBpZiAobGF0ZXhFeHAgJiYgbGF0ZXhGcmVxICYmIGNoYXRib3RGcmVxKSB7XHJcbiAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnNob3coKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5oaWRlKCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIG5leHRfaW5zdHJ1Y3Rpb25zKGluY3JlbWVudDogbnVtYmVyKSB7XHJcbiAgICBpbnN0cnVjdGlvbl9pICs9IGluY3JlbWVudFxyXG5cclxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDApIHtcclxuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfcHJldlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxyXG4gICAgfVxyXG4gICAgaWYoaW5zdHJ1Y3Rpb25faSA9PSA0ICYmICFjaGVja1ByZVN1cnZleSgpKSB7XHJcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxyXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLmhpZGUoKVxyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcclxuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5zaG93KClcclxuICAgIH1cclxuICAgIGlmIChpbnN0cnVjdGlvbl9pID49IDUpIHtcclxuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuc2hvdygpXHJcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikudmFsKFwiU3RhcnQgc3R1ZHlcIilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChcIiNpbnN0cnVjdGlvbnNfYW5kX2RlY29yYXRpb25zXCIpLmhpZGUoKVxyXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnZhbChcIk5leHRcIilcclxuICAgIH1cclxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDYpIHtcclxuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuc2hvdygpXHJcbiAgICAgICAgJChcIiNtYWluX2JveF9pbnN0cnVjdGlvbnNcIikuaGlkZSgpXHJcbiAgICAgICAgJChcIiNtYWluX2JveF9leHBlcmltZW50XCIpLnNob3coKVxyXG4gICAgICAgIC8vIFJlc2V0IG91ciBjb25kaXRpb24gaW5kaWNlcyBiZWZvcmUgc3RhcnRpbmcgdGhlIGV4cGVyaW1lbnRcclxuXHJcbiAgICAgICAgbmV4dF9xdWVzdGlvbigpXHJcbiAgICB9XHJcblxyXG4gICAgJChcIiNtYWluX2JveF9pbnN0cnVjdGlvbnNcIikuY2hpbGRyZW4oXCI6bm90KGlucHV0KVwiKS5lYWNoKChfLCBlbCkgPT4ge1xyXG4gICAgICAgICQoZWwpLmhpZGUoKVxyXG4gICAgfSlcclxuICAgICQoYCNpbnN0cnVjdGlvbnNfJHtpbnN0cnVjdGlvbl9pfWApLnNob3coKVxyXG59XHJcbiQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbmV4dF9pbnN0cnVjdGlvbnMoKzEpKVxyXG4kKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfcHJldlwiKS5vbihcImNsaWNrXCIsICgpID0+IG5leHRfaW5zdHJ1Y3Rpb25zKC0xKSlcclxuXHJcbiQoXCIjYnV0dG9uX25leHRcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSB1c2VyIGJhbGFuY2VcclxuICAgIGxldCBvbGRfYmFsYW5jZSA9IGJhbGFuY2VcclxuICAgIHVwZGF0ZV9iYWxhbmNlKClcclxuXHJcbiAgICBpZiAoY3VycmVudFF1ZXN0aW9uSW5kZXggPiAwKSB7XHJcbiAgICAgICAgbGV0IGxvZ2dlZF9kYXRhID0ge1xyXG4gICAgICAgICAgICBcInF1ZXN0aW9uX2lcIjogY3VycmVudFF1ZXN0aW9uSW5kZXgsXHJcbiAgICAgICAgICAgIFwidXNlcl9zZWxlY3Rpb25zXCI6IHtcclxuICAgICAgICAgICAgICAgIFwiYW5zd2Vyb25seVwiOiB1c2Vyc2VsZWN0aW9uX2Fuc3dlcm9ubHksXHJcbiAgICAgICAgICAgICAgICBcIndpdGhleHBsYW5hdGlvblwiOiB1c2Vyc2VsZWN0aW9uX3dpdGhleHBsYW5hdGlvbixcclxuICAgICAgICAgICAgICAgIFwid2l0aGV4cGxhbmF0aW9ucXVhbGl0eVwiOiB1c2Vyc2VsZWN0aW9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJ1c2VyX2lzX2NvcnJlY3RcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJhbnN3ZXJvbmx5XCI6IGlzX3VzZXJfY29ycmVjdCh1c2Vyc2VsZWN0aW9uX2Fuc3dlcm9ubHkpLFxyXG4gICAgICAgICAgICAgICAgXCJ3aXRoZXhwbGFuYXRpb25cIjogaXNfdXNlcl9jb3JyZWN0KHVzZXJzZWxlY3Rpb25fd2l0aGV4cGxhbmF0aW9uKSxcclxuICAgICAgICAgICAgICAgIFwid2l0aGV4cGxhbmF0aW9ucXVhbGl0eVwiOiBpc191c2VyX2NvcnJlY3QodXNlcnNlbGVjdGlvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcImJhbGFuY2VcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJvbGRcIjogb2xkX2JhbGFuY2UsXHJcbiAgICAgICAgICAgICAgICBcIm5ld1wiOiBiYWxhbmNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvZ2dlZF9kYXRhWydxdWVzdGlvbiddID0gcXVlc3Rpb25cclxuICAgICAgICBsb2dnZWRfZGF0YVsnY291bnRfZXhpdGVkX3BhZ2UnXSA9IGNvdW50X2V4aXRlZF9wYWdlXHJcbiAgICAgICAgbG9nX2RhdGEobG9nZ2VkX2RhdGEpXHJcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgPSAwXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBuZXh0X3F1ZXN0aW9uKClcclxufSk7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGlzX3VzZXJfY29ycmVjdChzZWxlY3Rpb24pIHtcclxuICAgIGlmIChzZWxlY3Rpb24gIT0gMikge1xyXG4gICAgICAgIGxldCBjb3JyZWN0X3NlbGVjdGlvbiA9IDEgLSBxdWVzdGlvbltcInByZWRpY3Rpb25faXNfY29ycmVjdFwiXSAvLyAwIGlmIEFJIGlzIGNvcnJlY3QsIDEgaWYgaW5jb3JyZWN0XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbiA9PSBjb3JyZWN0X3NlbGVjdGlvbiA/IDEgOiAwXHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTFcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlX2JhbGFuY2UoKSB7XHJcbiAgICBpZiAodXNlcnNlbGVjdGlvbl93aXRoZXhwbGFuYXRpb25xdWFsaXR5ICE9IDIpIHtcclxuICAgICAgICBsZXQgY29ycmVjdF9zZWxlY3Rpb24gPSAxIC0gcXVlc3Rpb25bXCJwcmVkaWN0aW9uX2lzX2NvcnJlY3RcIl0gLy8gMCBpZiBBSSBpcyBjb3JyZWN0LCAxIGlmIGluY29ycmVjdFxyXG4gICAgICAgIGlmICh1c2Vyc2VsZWN0aW9uX3dpdGhleHBsYW5hdGlvbnF1YWxpdHkgPT0gY29ycmVjdF9zZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgYmFsYW5jZSArPSBiYWxhbmNlX2luY3JlbWVudFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyogTmV3IGZ1bmN0aW9uOiBTaG93IHN0YXJ0LW9mLWNvbmRpdGlvbiBwYWdlICovXHJcbmZ1bmN0aW9uIHNob3dTdGFydENvbmRpdGlvblBhZ2UoY29uZGl0aW9uOiBzdHJpbmcpIHtcclxuICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKCk7XHJcblxyXG4gICAgJChcIiNzdGFydF9jb25kaXRpb25fcGFnZVwiKS5lbXB0eSgpLnNob3coKTtcclxuICAgICQoXCIjc3RhcnRfY29uZGl0aW9uX3BhZ2VcIikuYXBwZW5kKFwiPGgyPlN0YXJ0IFwiICsgY29uZGl0aW9uICsgXCI8L2gyPlwiKTtcclxuICAgICQoXCIjc3RhcnRfY29uZGl0aW9uX3BhZ2VcIikuYXBwZW5kKFwiPGlucHV0IGlkPSdzdGFydF9jb25kaXRpb25fbmV4dCcgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nTmV4dCc+XCIpO1xyXG4gICAgJChcIiNzdGFydF9jb25kaXRpb25fbmV4dFwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAkKFwiI3N0YXJ0X2NvbmRpdGlvbl9wYWdlXCIpLmhpZGUoKTtcclxuICAgICAgICAvLyBBZnRlciBzdGFydCBwYWdlLCBiZWdpbiB3aXRoIGZpcnN0IHF1ZXN0aW9uIChzZXQgaW5kZXggdG8gMSlcclxuICAgICAgICBjdXJyZW50UXVlc3Rpb25JbmRleCA9IDE7XHJcbiAgICAgICAgbmV4dF9xdWVzdGlvbigpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qIE5ldyBmdW5jdGlvbjogU2hvdyBlbmQtb2YtY29uZGl0aW9uIHBhZ2UgKi9cclxuZnVuY3Rpb24gc2hvd0VuZENvbmRpdGlvblBhZ2UoY29uZGl0aW9uOiBzdHJpbmcpIHtcclxuICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKCk7XHJcbiAgICBjb25zdCBjdXJyZW50Q29uZGl0aW9uID0gZGF0YVtjdXJyZW50Q29uZGl0aW9uSW5kZXhdLmNvbmRpdGlvbjtcclxuICAgICQoXCIjY29uZGl0aW9uX2xhYmVsXCIpLnRleHQoY3VycmVudENvbmRpdGlvbik7XHJcbiAgICAvLyBSZXNldCBlYWNoIHNsaWRlciB0byBhIGRlZmF1bHQsIGUuZy4sIDBcclxuICAgICQoXCIjbWVudGFsX2RlbWFuZFwiKS52YWwoXCIwXCIpO1xyXG4gICAgJChcIiNodXJyaWVkX2RlbWFuZFwiKS52YWwoXCIwXCIpO1xyXG4gICAgJChcIiNwZXJmb3JtYW5jZVwiKS52YWwoXCIwXCIpO1xyXG4gICAgJChcIiNlZmZvcnRcIikudmFsKFwiMFwiKTtcclxuICAgICQoXCIjZnJ1c3RyYXRpb25cIikudmFsKFwiMFwiKTtcclxuXHJcbiAgICAkKFwiI25hc2FfdGx4X3N1cnZleVwiKS5zaG93KCk7XHJcbiAgIFxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIG5leHRfcXVlc3Rpb24oKSB7XHJcbiAgICAvLyByZXN0b3JlIHByZXZpb3VzIHN0YXRlIG9mIFVJXHJcbiAgICAkKFwiI21haW5fYm94X2V4cGVyaW1lbnRcIikuc2hvdygpO1xyXG4gICAgJChcIiNidXR0b25fbmV4dFwiKS5oaWRlKClcclxuICAgICQoJyNidXR0b25fcXVpdCcpLmhpZGUoKVxyXG4gICAgLy8kKFwiI3JhbmdlX3ZhbFwiKS52YWwodXNlcl90cnVzdClcclxuICAgIGNvbnNvbGUubG9nKFwicXVlc3Rpb24gaW5kZXgsIGNvbmRpdGlvbiBpbmRleFwiLCBjdXJyZW50UXVlc3Rpb25JbmRleCwgY3VycmVudENvbmRpdGlvbkluZGV4KSAgICAgICAgXHJcblxyXG4gICAgaWYgKGN1cnJlbnRDb25kaXRpb25JbmRleCA+PSBkYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKCk7XHJcbiAgICAgICAgJChcIiNxdWFsaXRhdGl2ZV9zZWN0aW9uXCIpLnNob3coKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgY29uZGl0aW9uQmxvY2sgPSBkYXRhW2N1cnJlbnRDb25kaXRpb25JbmRleF07XHJcbiAgICBjb25zb2xlLmxvZyhcIkNvbmRpdGlvbiBibG9ja1wiLCBjb25kaXRpb25CbG9jaylcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcblxyXG4gICAgLy8gSWYgd2UgYXJlIGF0IHRoZSBzdGFydCBwYWdlIGZvciB0aGlzIGNvbmRpdGlvbiwgc2hvdyBpdC5cclxuICAgIGlmIChjdXJyZW50UXVlc3Rpb25JbmRleCA9PT0gMCkge1xyXG4gICAgICAgIHNob3dTdGFydENvbmRpdGlvblBhZ2UoY29uZGl0aW9uQmxvY2suY29uZGl0aW9uKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgd2UndmUgZ29uZSBwYXN0IGFsbCBxdWVzdGlvbnMgaW4gdGhpcyBjb25kaXRpb24sIHNob3cgdGhlIGVuZC1vZi1jb25kaXRpb24gcGFnZS5cclxuICAgIGlmIChjdXJyZW50UXVlc3Rpb25JbmRleCA+IGNvbmRpdGlvbkJsb2NrLnF1ZXN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICBzaG93RW5kQ29uZGl0aW9uUGFnZShjb25kaXRpb25CbG9jay5jb25kaXRpb24pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcXVlc3Rpb24gPSBjb25kaXRpb25CbG9jay5xdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSW5kZXggLSAxXTtcclxuICAgIGNvbnNvbGUubG9nKFwiUXVlc3Rpb25cIiwgY3VycmVudFF1ZXN0aW9uSW5kZXgsIHF1ZXN0aW9uKVxyXG4gICAgXHJcbiAgICBcclxuICAgIC8vIC0tLSBVcGRhdGUgUGFydCAxIGVsZW1lbnRzIC0tLVxyXG4gICAgLy8gRm9yIHRoZSBpbWFnZTogYXNzdW1lIGEgdmFsaWQgQmFzZTY0IHN0cmluZyBmb3Igbm93LlxyXG4gICAgaWYgKHF1ZXN0aW9uW1wiaW1hZ2VcIl0pIHtcclxuICAgICAgJChcIiNxdWVzdGlvbl9pbWFnZVwiKS5hdHRyKFwic3JjXCIsIFwiZGF0YTppbWFnZS9wbmc7YmFzZTY0LFwiICsgcXVlc3Rpb25bXCJpbWFnZVwiXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKFwiI3F1ZXN0aW9uX2ltYWdlXCIpLmF0dHIoXCJzcmNcIiwgXCJcIik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIERpc3BsYXkgdGhlIHByZWRpY3RlZCB0ZXh0LlxyXG4gICAgLy8gQnVpbGQgdGhlIHByZWRpY3RlZCB0ZXh0IEhUTUwgYnkgY29uY2F0ZW5hdGluZyB0b2tlbl9pbmZvXHJcbiAgICBsZXQgcHJlZGljdGVkSHRtbCA9IFwiXCI7XHJcbiAgICBpZiAocXVlc3Rpb25bXCJ0b2tlbl9pbmZvXCJdICYmIEFycmF5LmlzQXJyYXkocXVlc3Rpb25bXCJ0b2tlbl9pbmZvXCJdKSkge1xyXG4gICAgICAgIHByZWRpY3RlZEh0bWwgPSBxdWVzdGlvbltcInRva2VuX2luZm9cIl1cclxuICAgICAgICAgICAgLy8gU2tpcCB0aGUgZW5kIHRva2VuXHJcbiAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLnRva2VuICE9PSBcIjx8aW1fZW5kfD5cIilcclxuICAgICAgICAgICAgLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIHNwZWNpYWwgXCLEoFwiIGNoYXJhY3RlciB3aXRoIGEgc3BhY2VcclxuICAgICAgICAgICAgICAgIGxldCB0b2tlblRleHQgPSBpdGVtLnRva2VuLnJlcGxhY2UoL8SgL2csIFwiIFwiKTtcclxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcHJvYmFiaWxpdHkgZnJvbSB0aGUgZmlyc3QgY2FuZGlkYXRlIGluIHRvcF81X3Rva2Vucy5cclxuICAgICAgICAgICAgICAgIC8vIElmIG5vdCBhdmFpbGFibGUsIGRlZmF1bHQgdG8gMSAobm8gaGlnaGxpZ2h0KS5cclxuICAgICAgICAgICAgICAgIGxldCBwcm9iID0gKGl0ZW0udG9wXzVfdG9rZW5zICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRvcF81X3Rva2Vuc1swXSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udG9wXzVfdG9rZW5zWzBdLnByb2JhYmlsaXR5ID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpdGVtLnRvcF81X3Rva2Vuc1swXS5wcm9iYWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxO1xyXG4gICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgaGlnaGxpZ2h0IGludGVuc2l0eSAoMCBpZiBwcm9iYWJpbGl0eSBpcyAxLCAxIGlmIHByb2JhYmlsaXR5IGlzIDApXHJcbiAgICAgICAgICAgICAgICBsZXQgaW50ZW5zaXR5ID0gMSAtIHByb2I7XHJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBzcGFuIHdpdGggcmVkIGJhY2tncm91bmQ7IGFkanVzdCB0aGUgb3BhY2l0eSBieSBpbnRlbnNpdHkuXHJcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb25bXCJpc19oaWdobGlnaHRlZFwiXSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAwLCAwLCAke2ludGVuc2l0eX0pO1wiPiR7dG9rZW5UZXh0fTwvc3Bhbj5gO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5UZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuam9pbignJyk7XHJcbiAgICB9XHJcbiAgICAkKFwiI3ByZWRpY3RlZF90ZXh0XCIpLmh0bWwocHJlZGljdGVkSHRtbCk7XHJcbiAgICAgIFxyXG4gICAgXHJcbiAgICAvLyBDb25jYXRlbmF0ZSB0b2tlbnMgKHdpdGggcmVwbGFjZW1lbnQgb2YgxKAgYW5kIHNraXBwaW5nIDx8aW1fZW5kfD4pLlxyXG4gICAgbGV0IHRva2Vuc0NvbmNhdGVuYXRlZCA9IFwiXCI7XHJcbiAgICBpZiAocXVlc3Rpb25bXCJ0b2tlbl9pbmZvXCJdICYmIEFycmF5LmlzQXJyYXkocXVlc3Rpb25bXCJ0b2tlbl9pbmZvXCJdKSkge1xyXG4gICAgICAgIHRva2Vuc0NvbmNhdGVuYXRlZCA9IHF1ZXN0aW9uW1widG9rZW5faW5mb1wiXVxyXG4gICAgICAgICAgLm1hcChpdGVtID0+IGl0ZW0udG9rZW4pXHJcbiAgICAgICAgICAuZmlsdGVyKHRva2VuID0+IHRva2VuICE9PSBcIjx8aW1fZW5kfD5cIilcclxuICAgICAgICAgIC5tYXAodG9rZW4gPT4gdG9rZW4ucmVwbGFjZSgvxKAvZywgXCIgXCIpKVxyXG4gICAgICAgICAgLmpvaW4oJycpO1xyXG4gICAgfVxyXG4gICAgJChcIiN0b2tlbl9pbnB1dFwiKS52YWwodG9rZW5zQ29uY2F0ZW5hdGVkKTtcclxuICAgIFxyXG4gICAgLy8gKFVwZGF0ZSBwcm9ncmVzcyBhbmQgb3RoZXIgZWxlbWVudHMgYXMgbmVjZXNzYXJ5KVxyXG4gICAgJChcIiNwcm9ncmVzc1wiKS50ZXh0KGBTZWN0aW9uICR7Y3VycmVudENvbmRpdGlvbkluZGV4ICsgMX0gb2YgJHtkYXRhLmxlbmd0aH0gfCBRdWVzdGlvbiAke2N1cnJlbnRRdWVzdGlvbkluZGV4fSBvZiAke2NvbmRpdGlvbkJsb2NrLnF1ZXN0aW9ucy5sZW5ndGh9YCk7XHJcbiAgICAgICAgLy8gQWx3YXlzIHNob3cgUGFydCAxIGFuZCBoaWRlIFBhcnQgMiB3aGVuIGEgbmV3IHF1ZXN0aW9uIGxvYWRzLlxyXG4gICAgICAgICQoXCIjcGFydDFcIikuc2hvdygpO1xyXG4gICAgICAgICQoXCIjcGFydDJcIikuaGlkZSgpO1xyXG4gICAgXHJcbi8vIEF0IHRoZSBlbmQgb2YgbmV4dF9xdWVzdGlvbigpLCBhZnRlciB1cGRhdGluZyBhbGwgUGFydCAxIGVsZW1lbnRzOlxyXG4kKFwiI3Rva2VuX2lucHV0X2NvbnRhaW5lclwiKS5oaWRlKCk7XHJcbiQoXCIjYnV0dG9uX25leHRfcGFydDFcIikuaGlkZSgpO1xyXG5cclxuLy8gU3RhcnQgYSAyMC1zZWNvbmQgdGltZXIgZm9yIFBhcnQgMVxyXG5jbGVhclRpbWVvdXQocGFydDFUaW1lcik7XHJcbnBhcnQxVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChhdXRvU3VibWl0UGFydDEsIDIwMDAwKTtcclxuXHJcbi8vIFJlc2V0IGFuZCBzdGFydCB0aGUgdGltZXIgZm9yIFBhcnQgMVxyXG5yZW1haW5pbmdUaW1lID0gMjA7XHJcbiQoXCIjdGltZXJcIikudGV4dChyZW1haW5pbmdUaW1lKTtcclxuJChcIiN0aW1lclwiKS5zaG93KCk7XHJcblxyXG4vLyBDbGVhciBhbnkgcHJldmlvdXMgaW50ZXJ2YWxcclxuaWYgKHBhcnQxSW50ZXJ2YWwpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwocGFydDFJbnRlcnZhbCk7XHJcbn1cclxuXHJcbi8vIFN0YXJ0IGEgbmV3IGludGVydmFsIHRoYXQgY291bnRzIGRvd24gZXZlcnkgc2Vjb25kXHJcbnBhcnQxSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgcmVtYWluaW5nVGltZSAtPSAxO1xyXG4gICAgJChcIiN0aW1lclwiKS50ZXh0KHJlbWFpbmluZ1RpbWUpO1xyXG5cclxuICAgIC8vIFdoZW4gdGhlcmUgYXJlIDE1IHNlY29uZHMgb3IgbGVzcyByZW1haW5pbmcsIHNob3cgdGhlIGlucHV0IGJveCBhbmQgTmV4dCBidXR0b25cclxuICAgIGlmIChyZW1haW5pbmdUaW1lIDw9IDE1KSB7XHJcbiAgICAgICAgJChcIiN0b2tlbl9pbnB1dF9jb250YWluZXJcIikuc2hvdygpO1xyXG4gICAgICAgICQoXCIjYnV0dG9uX25leHRfcGFydDFcIikuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZW1haW5pbmdUaW1lIDw9IDApIHtcclxuICAgICAgICBjbGVhckludGVydmFsKHBhcnQxSW50ZXJ2YWwpO1xyXG4gICAgICAgIGF1dG9TdWJtaXRQYXJ0MSgpO1xyXG4gICAgICAgICQoXCIjdGltZXJcIikuaGlkZSgpO1xyXG4gICAgfVxyXG59LCAxMDAwKTtcclxuXHJcblxyXG59XHJcblxyXG4vLyBnZXQgdXNlciBpZCBhbmQgbG9hZCBxdWV1ZVxyXG4vLyB0cnkgdG8gc2VlIGlmIHN0YXJ0IG92ZXJyaWRlIHdhcyBwYXNzZWRcclxuY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuY29uc3Qgc3RhcnRPdmVycmlkZSA9IHVybFBhcmFtcy5nZXQoJ3N0YXJ0Jyk7XHJcbmNvbnN0IFVJREZyb21VUkwgPSB1cmxQYXJhbXMuZ2V0KFwidWlkXCIpXHJcbmdsb2JhbFRoaXMudXJsX2RhdGEgPSBwYXJhbXNUb09iamVjdCh1cmxQYXJhbXMuZW50cmllcygpKVxyXG5cclxuaWYgKGdsb2JhbFRoaXMudXJsX2RhdGFbJ3N0dWR5X2lkJ10gPT0gbnVsbCkge1xyXG4gICAgZ2xvYmFsVGhpcy51cmxfZGF0YVsnc3R1ZHlfaWQnXSA9IFwiZGVtb19zdHVkeVwiXHJcbn1cclxuaWYgKGdsb2JhbFRoaXMudXJsX2RhdGFbJ3Byb2xpZmljX2lkJ10gPT0gbnVsbCkge1xyXG4gICAgZ2xvYmFsVGhpcy51cmxfZGF0YVsncHJvbGlmaWNfaWQnXSA9IFwiZGVtb191c2VyXCJcclxufVxyXG5pZiAoZ2xvYmFsVGhpcy51cmxfZGF0YVsnc2Vzc2lvbl9pZCddID09IG51bGwpIHtcclxuICAgIGdsb2JhbFRoaXMudXJsX2RhdGFbJ3Nlc3Npb25faWQnXSA9IFwiZGVtb19zZXNzaW9uXCJcclxufVxyXG5cclxuaWYgKFVJREZyb21VUkwgIT0gbnVsbCkge1xyXG4gICAgZ2xvYmFsVGhpcy51aWQgPSBVSURGcm9tVVJMIGFzIHN0cmluZ1xyXG4gICAgaWYgKGdsb2JhbFRoaXMudWlkID09IFwicHJvbGlmaWNfcmFuZG9tXCIpIHtcclxuICAgICAgICBsZXQgcXVldWVfaWQgPSBgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCl9YC5wYWRTdGFydCgzLCBcIjBcIilcclxuICAgICAgICBnbG9iYWxUaGlzLnVpZCA9IGAke3VybFBhcmFtcy5nZXQoXCJwcm9saWZpY19xdWV1ZV9uYW1lXCIpfS8ke3F1ZXVlX2lkfWBcclxuICAgIH1cclxufSBlbHNlIGlmIChERVZNT0RFKSB7XHJcbiAgICBnbG9iYWxUaGlzLnVpZCA9IFwiZGVtb1wiXHJcbn0gZWxzZSB7XHJcbiAgICBsZXQgVUlEX21heWJlOiBhbnkgPSBudWxsXHJcbiAgICB3aGlsZSAoVUlEX21heWJlID09IG51bGwpIHtcclxuICAgICAgICBVSURfbWF5YmUgPSBwcm9tcHQoXCJFbnRlciB5b3VyIHVzZXIgaWQuIFBsZWFzZSBnZXQgaW4gdG91Y2ggaWYgeW91IHdlcmUgbm90IGFzc2lnbmVkIGFuIGlkIGJ1dCB3aXNoIHRvIHBhcnRpY2lwYXRlIGluIHRoaXMgZXhwZXJpbWVudC5cIilcclxuICAgIH1cclxuICAgIGdsb2JhbFRoaXMudWlkID0gVUlEX21heWJlIVxyXG59XHJcblxyXG4vLyB2ZXJzaW9uIGZvciBwYXBlclxyXG5pZiAoREVWTU9ERSkge1xyXG4gICAgTU9DS01PREUgPSB0cnVlXHJcbn0gZWxzZSBpZiAoZ2xvYmFsVGhpcy51cmxfZGF0YVsnc2Vzc2lvbl9pZCddLnN0YXJ0c1dpdGgoXCJkZW1vXCIpKSB7XHJcbiAgICBNT0NLTU9ERSA9IHRydWVcclxufVxyXG5cclxuY29uc29sZS5sb2coXCJSdW5uaW5nIHdpdGggVUlEXCIsIGdsb2JhbFRoaXMudWlkKVxyXG5sb2FkX2RhdGEoKS5jYXRjaCgoX2Vycm9yKSA9PiB7XHJcbiAgICAvL2FsZXJ0KFwiSW52YWxpZCB1c2VyIGlkLlwiKVxyXG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHVzZXIgaWQuXCIpXHJcbiAgICBjb25zb2xlLmxvZyhnbG9iYWxUaGlzLnVpZCEpXHJcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcclxufVxyXG4pLnRoZW4oKG5ld19kYXRhKSA9PiB7XHJcbiAgICBkYXRhID0gbmV3X2RhdGFcclxuICAgIGlmIChzdGFydE92ZXJyaWRlICE9IG51bGwpIHtcclxuICAgICAgICBjdXJyZW50UXVlc3Rpb25JbmRleCA9IHBhcnNlSW50KHN0YXJ0T3ZlcnJpZGUpIC0gMVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgZnJvbVwiLCBjdXJyZW50UXVlc3Rpb25JbmRleClcclxuICAgIH1cclxuICAgIC8vIG5leHRfcXVlc3Rpb24oKVxyXG4gICAgbmV4dF9pbnN0cnVjdGlvbnMoMClcclxuICAgICQoXCIjbWFpbl9ib3hfaW5zdHJ1Y3Rpb25zXCIpLnNob3coKVxyXG4gICAgJChcIiNpbnN0cnVjdGlvbnNfYW5kX2RlY29yYXRpb25zXCIpLmhpZGUoKVxyXG59KVxyXG5cclxuY29uc29sZS5sb2coXCJTdGFydGluZyBzZXNzaW9uIHdpdGggVUlEOlwiLCBnbG9iYWxUaGlzLnVpZCEpXHJcblxyXG5sZXQgYWxlcnRfYWN0aXZlID0gZmFsc2VcclxuZG9jdW1lbnQub252aXNpYmlsaXR5Y2hhbmdlID0gKCkgPT4ge1xyXG4gICAgaWYgKCFhbGVydF9hY3RpdmUpIHtcclxuICAgICAgICBjb3VudF9leGl0ZWRfcGFnZSArPSAxXHJcbiAgICAgICAgYWxlcnRfYWN0aXZlID0gdHJ1ZVxyXG4gICAgICAgIC8vaWYgKCEoZ2xvYmFsVGhpcy51aWQhLnN0YXJ0c1dpdGgoXCJkZW1vXCIpKSkge1xyXG4gICAgICAgIC8vICAgIGFsZXJ0KFwiUGxlYXNlIGRvbid0IGxlYXZlIHRoZSBwYWdlLiBJZiB5b3UgZG8gc28gYWdhaW4sIHdlIG1heSByZXN0cmljdCBwYXlpbmcgeW91LlwiKVxyXG4gICAgICAgIC8vfVxyXG4gICAgICAgIGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFdoZW4gdGhlIERPTSBpcyByZWFkeTpcclxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xyXG4gICAgLy8gVHJhbnNpdGlvbiBmcm9tIFBhcnQgMSAocXVlc3Rpb24pIHRvIFBhcnQgMiAoY29uZmlkZW5jZSByYXRpbmcpXHJcbiAgICAkKFwiI2J1dHRvbl9uZXh0X3BhcnQxXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAvLyBPcHRpb25hbGx5LCBsb2cgb3Igc2F2ZSBhbnkgUGFydCAxIGRhdGEgaGVyZS5cclxuICAgICAgY2xlYXJUaW1lb3V0KHBhcnQxVGltZXIpO1xyXG4gICAgICAkKFwiI3RpbWVyXCIpLmhpZGUoKTtcclxuXHJcblxyXG4gICAgICAkKFwiI3BhcnQxXCIpLmhpZGUoKTtcclxuICAgICAgJChcIiNwYXJ0MlwiKS5zaG93KCk7XHJcbiAgICB9KTtcclxuICBcclxuICAgIC8vIEhhbmRsZSBjb25maWRlbmNlIHJhdGluZyBzZWxlY3Rpb25zOlxyXG4gICAgJChcIi5jb25maWRlbmNlLWJ1dHRvblwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCByYXRpbmcgPSBwYXJzZUludCgkKHRoaXMpLmF0dHIoXCJkYXRhLXJhdGluZ1wiKSBhcyBzdHJpbmcpO1xyXG4gICAgICAgIC8vIFJlbW92ZSAnc2VsZWN0ZWQnIGZyb20gYWxsIGJ1dHRvbnMsIHRoZW4gYWRkIGl0IHRvIHRoZSBjbGlja2VkIG9uZS5cclxuICAgICAgICAkKFwiLmNvbmZpZGVuY2UtYnV0dG9uXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgIC8vIFN0b3JlIHRoZSByYXRpbmcgYW5kIGVuYWJsZSB0aGUgUGFydCAyIE5leHQgYnV0dG9uLlxyXG4gICAgICAgIGNvbmZpZGVuY2VSYXRpbmcgPSByYXRpbmc7XHJcbiAgICAgICAgJChcIiNidXR0b25fbmV4dF9wYXJ0MlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9KTtcclxuICBcclxuICAgIC8vIFRyYW5zaXRpb24gZnJvbSBQYXJ0IDIgKGNvbmZpZGVuY2UgcmF0aW5nKSB0byB0aGUgbmV4dCBxdWVzdGlvbi5cclxuICAgICQoXCIjYnV0dG9uX25leHRfcGFydDJcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIC8vIExvZyB0aGUgY29uZmlkZW5jZSByYXRpbmcgYWxvbmcgd2l0aCBvdGhlciBkYXRhIGlmIG5lZWRlZC5cclxuICAgICAgbGV0IGxvZ2dlZF9kYXRhID0ge1xyXG4gICAgICAgIFwicXVlc3Rpb25faVwiOiBjdXJyZW50UXVlc3Rpb25JbmRleCxcclxuICAgICAgICBcImNvbmRpdGlvbl9pXCI6IGN1cnJlbnRDb25kaXRpb25JbmRleCxcclxuICAgICAgICBcImNvbmZpZGVuY2VfcmF0aW5nXCI6IGNvbmZpZGVuY2VSYXRpbmcsXHJcbiAgICAgICAgLy8gLi4uIGluY2x1ZGUgb3RoZXIgbG9nZ2luZyBmaWVsZHMgYXMgZGVzaXJlZFxyXG4gICAgICB9O1xyXG4gICAgICBsb2dfZGF0YShsb2dnZWRfZGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBSZXNldCBQYXJ0IDIgVUkgZWxlbWVudHMgZm9yIHRoZSBuZXh0IHF1ZXN0aW9uLlxyXG4gICAgICAkKFwiI2J1dHRvbl9uZXh0X3BhcnQyXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XHJcbiAgICAgICQoXCIuY29uZmlkZW5jZS1idXR0b25cIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgY29uZmlkZW5jZVJhdGluZyA9IC0xO1xyXG4gICAgICBcclxuICAgICAgLy8gU3dpdGNoIGJhY2sgdG8gUGFydCAxIGFuZCBsb2FkIHRoZSBuZXh0IHF1ZXN0aW9uLlxyXG4gICAgICAkKFwiI3BhcnQyXCIpLmhpZGUoKTtcclxuICAgICAgJChcIiNwYXJ0MVwiKS5zaG93KCk7XHJcbiAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4Kys7XHJcbiAgICAgIG5leHRfcXVlc3Rpb24oKTtcclxuICAgIH0pO1xyXG4gICAgJChcImlucHV0W25hbWU9J2xhdGV4RXhwZXJpZW5jZSddLCBpbnB1dFtuYW1lPSdsYXRleEZyZXF1ZW5jeSddLCBpbnB1dFtuYW1lPSdjaGF0Ym90RnJlcXVlbmN5J11cIikub24oXCJjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgIGlmKGNoZWNrUHJlU3VydmV5KCkpIHtcclxuICAgICAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXHJcbiAgICAgICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnNob3coKSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuICAgIC8vIGtleWxvZyB0aGUgaW5wdXRcclxuICAgICQoXCIjdG9rZW5faW5wdXRcIikub24oXCJpbnB1dFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgY3VycmVudFRleHQgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXNlciBpbnB1dDpcIiwgY3VycmVudFRleHQpO1xyXG4gICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICAkKFwiI25hc2FfdGx4X25leHRcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgLy8gR2F0aGVyIHNsaWRlciB2YWx1ZXNcclxuICAgICAgICBjb25zdCBtZW50YWxEZW1hbmQgPSAkKFwiI21lbnRhbF9kZW1hbmRcIikudmFsKCk7XHJcbiAgICAgICAgY29uc3QgaHVycmllZERlbWFuZCA9ICQoXCIjaHVycmllZF9kZW1hbmRcIikudmFsKCk7XHJcbiAgICAgICAgY29uc3QgcGVyZm9ybWFuY2UgICA9ICQoXCIjcGVyZm9ybWFuY2VcIikudmFsKCk7XHJcbiAgICAgICAgY29uc3QgZWZmb3J0ICAgICAgICA9ICQoXCIjZWZmb3J0XCIpLnZhbCgpO1xyXG4gICAgICAgIGNvbnN0IGZydXN0cmF0aW9uICAgPSAkKFwiI2ZydXN0cmF0aW9uXCIpLnZhbCgpO1xyXG4gICAgXHJcbiAgICAgICAgLy8gTG9nIHRoZSBkYXRhXHJcbiAgICAgICAgY29uc3QgdGx4RGF0YSA9IHtcclxuICAgICAgICAgIG1lbnRhbF9kZW1hbmQ6IG1lbnRhbERlbWFuZCxcclxuICAgICAgICAgIGh1cnJpZWRfZGVtYW5kOiBodXJyaWVkRGVtYW5kLFxyXG4gICAgICAgICAgcGVyZm9ybWFuY2U6IHBlcmZvcm1hbmNlLFxyXG4gICAgICAgICAgZWZmb3J0OiBlZmZvcnQsXHJcbiAgICAgICAgICBmcnVzdHJhdGlvbjogZnJ1c3RyYXRpb25cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvZ19kYXRhKHtcclxuICAgICAgICAgIGNvbmRpdGlvbjogJChcIiNjb25kaXRpb25fbGFiZWxcIikudGV4dCgpLFxyXG4gICAgICAgICAgdGx4OiB0bHhEYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAvLyBIaWRlIHRoZSBOQVNBIFRMWCBwYWdlIGFuZCBtb3ZlIG9uXHJcbiAgICAgICAgJChcIiNuYXNhX3RseF9zdXJ2ZXlcIikuaGlkZSgpO1xyXG4gICAgICAgIC8vIGUuZy4sIGxvYWQgbmV4dCBjb25kaXRpb24gb3IgbmV4dCBxdWVzdGlvblxyXG4gICAgICAgIGN1cnJlbnRDb25kaXRpb25JbmRleCsrO1xyXG4gICAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4ID0gMDtcclxuICAgICAgICBuZXh0X3F1ZXN0aW9uKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgXHJcblxyXG59KTtcclxuICBmdW5jdGlvbiBhdXRvU3VibWl0UGFydDEoKSB7XHJcbiAgICAvLyBTdG9wIHRoZSB0aW1lciBpZiBub3QgYWxyZWFkeSBjbGVhcmVkXHJcbiAgICBjbGVhckludGVydmFsKHBhcnQxSW50ZXJ2YWwpO1xyXG4gICAgJChcIiN0aW1lclwiKS5oaWRlKCk7XHJcbiAgICBcclxuICAgIC8vIEF1dG9tYXRpY2FsbHkgdHJhbnNpdGlvbiB0byBQYXJ0IDJcclxuICAgICQoXCIjcGFydDFcIikuaGlkZSgpO1xyXG4gICAgJChcIiNwYXJ0MlwiKS5zaG93KCk7XHJcbn1cclxuJChcIiNxdWFsX25leHRcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBxMSA9ICgkKFwiI3F1YWxfcTFcIikudmFsKCkgYXMgc3RyaW5nKSB8fCBcIlwiO1xyXG4gICAgY29uc3QgcTIgPSAoJChcIiNxdWFsX3EyXCIpLnZhbCgpIGFzIHN0cmluZykgfHwgXCJcIjtcclxuICAgIGNvbnN0IHEzID0gKCQoXCIjcXVhbF9xM1wiKS52YWwoKSBhcyBzdHJpbmcpIHx8IFwiXCI7XHJcbiAgICBcclxuICAgIGxldCB2YWxpZCA9IHRydWU7XHJcbiAgICBcclxuICAgIGlmIChxMS5sZW5ndGggPCAyNSkge1xyXG4gICAgICAgICQoXCIjd2Fybl9xMVwiKS5zaG93KCk7XHJcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChcIiN3YXJuX3ExXCIpLmhpZGUoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHEyLmxlbmd0aCA8IDI1KSB7XHJcbiAgICAgICAgJChcIiN3YXJuX3EyXCIpLnNob3coKTtcclxuICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAkKFwiI3dhcm5fcTJcIikuaGlkZSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAocTMubGVuZ3RoIDwgMCkge1xyXG4gICAgICAgICQoXCIjd2Fybl9xM1wiKS5zaG93KCk7XHJcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChcIiN3YXJuX3EzXCIpLmhpZGUoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gSWYgdmFsaWRhdGlvbiBmYWlscywgZG8gbm90IHByb2NlZWRcclxuICAgIGlmICghdmFsaWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIElmIGFsbCB0ZXh0IGJveGVzIGhhdmUgYXQgbGVhc3QgNTAgY2hhcmFjdGVycywgbG9nIGRhdGEgYW5kIHByb2NlZWRcclxuICAgIGNvbnN0IGZpbmFsRGF0YSA9IHtcclxuICAgICAgICBxdWFsaXRhdGl2ZToge1xyXG4gICAgICAgICAgICBxMTogcTEsXHJcbiAgICAgICAgICAgIHEyOiBxMixcclxuICAgICAgICAgICAgcTM6IHEzXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyAuLi4gaW5jbHVkZSBhbnkgYWRkaXRpb25hbCBkYXRhIGlmIG5lZWRlZFxyXG4gICAgfTtcclxuICAgIGxvZ19kYXRhKGZpbmFsRGF0YSk7XHJcbiAgICBcclxuICAgIC8vIFRyYW5zaXRpb24gdG8gZW5kLW9mLXN1cnZleSDigJxUaGFuayB5b3XigJ0gc2NyZWVuIG9yIHNpbWlsYXIuXHJcbiAgICAkKFwiI3F1YWxpdGF0aXZlX3NlY3Rpb25cIikuaGlkZSgpO1xyXG4gICAgaWYgKE1PQ0tNT0RFKSB7XHJcbiAgICAgICAgJCgnI3Jld2FyZF9ib3hfbW9jaycpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7KGRhdGEubGVuZ3RoKSogKGRhdGFbMF0ubGVuZ3RoKX0gcXVlc3Rpb25zIGFuc3dlcmVkKSArICQyLmApO1xyXG4gICAgICAgICQoJyNyZXdhcmRfYm94X21vY2snKS5zaG93KCk7XHJcbiAgICAgICAgJChcIiNtYWluX2JveF9lbmRfbW9ja1wiKS5zaG93KCk7ICAgIFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAkKCcjcmV3YXJkX2JveCcpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7KGRhdGEubGVuZ3RoKSogKGRhdGFbMF0ubGVuZ3RoKX0gcXVlc3Rpb25zIGFuc3dlcmVkKSArICQyLmApO1xyXG4gICAgICAgICQoJyNyZXdhcmRfYm94Jykuc2hvdygpO1xyXG4gICAgICAgICQoXCIjbWFpbl9ib3hfZW5kXCIpLnNob3coKTsgICAgXHJcbiAgICB9XHJcbn0pO1xyXG4iLCJmdW5jdGlvbiBwYXJhbXNUb09iamVjdChlbnRyaWVzKSB7XHJcbiAgY29uc3QgcmVzdWx0ID0ge31cclxuICAvLyBlYWNoICdlbnRyeScgaXMgYSBba2V5LCB2YWx1ZV0gdHVwcGxlXHJcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xyXG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IHsgcGFyYW1zVG9PYmplY3QgfSJdLCJuYW1lcyI6WyJTRVJWRVJfTE9HX1JPT1QiLCJhc3luYyIsImxvZ19kYXRhIiwiZGF0YSIsImdsb2JhbFRoaXMiLCJ1cmxfZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJ1aWQiLCJyZXN1bHQiLCIkIiwiYWpheCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcm9qZWN0IiwicGF5bG9hZCIsInR5cGUiLCJjb250ZW50VHlwZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInNsZWVwIiwiZSIsIk1PQ0tNT0RFIiwicXVlc3Rpb24iLCJjb25maWRlbmNlUmF0aW5nIiwicGFydDFUaW1lciIsInBhcnQxSW50ZXJ2YWwiLCJyZW1haW5pbmdUaW1lIiwiY3VycmVudENvbmRpdGlvbkluZGV4IiwiY3VycmVudFF1ZXN0aW9uSW5kZXgiLCJiYWxhbmNlIiwiaW5zdHJ1Y3Rpb25faSIsImNvdW50X2V4aXRlZF9wYWdlIiwiY2hlY2tQcmVTdXJ2ZXkiLCJsYXRleEV4cCIsInZhbCIsImxhdGV4RnJlcSIsImNoYXRib3RGcmVxIiwic2hvdyIsImhpZGUiLCJuZXh0X2luc3RydWN0aW9ucyIsImluY3JlbWVudCIsImF0dHIiLCJyZW1vdmVBdHRyIiwibmV4dF9xdWVzdGlvbiIsImNoaWxkcmVuIiwiZWFjaCIsIl8iLCJlbCIsImlzX3VzZXJfY29ycmVjdCIsInNlbGVjdGlvbiIsImxlbmd0aCIsImNvbmRpdGlvbkJsb2NrIiwiY29uZGl0aW9uIiwiZW1wdHkiLCJhcHBlbmQiLCJvbiIsInF1ZXN0aW9ucyIsImN1cnJlbnRDb25kaXRpb24iLCJ0ZXh0Iiwic2hvd0VuZENvbmRpdGlvblBhZ2UiLCJwcmVkaWN0ZWRIdG1sIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIiwiaXRlbSIsInRva2VuIiwibWFwIiwidG9rZW5UZXh0IiwicmVwbGFjZSIsImludGVuc2l0eSIsInRvcF81X3Rva2VucyIsInByb2JhYmlsaXR5Iiwiam9pbiIsImh0bWwiLCJ0b2tlbnNDb25jYXRlbmF0ZWQiLCJjbGVhclRpbWVvdXQiLCJ3aW5kb3ciLCJhdXRvU3VibWl0UGFydDEiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJvbGRfYmFsYW5jZSIsImxvZ2dlZF9kYXRhIiwidXJsUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwibG9jYXRpb24iLCJzZWFyY2giLCJzdGFydE92ZXJyaWRlIiwiZ2V0IiwiVUlERnJvbVVSTCIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSIsInBhcmFtc1RvT2JqZWN0IiwicXVldWVfaWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwYWRTdGFydCIsIlVJRF9tYXliZSIsInByb21wdCIsInN0YXJ0c1dpdGgiLCJnZXRKU09OIiwiRGF0ZSIsIm5vdyIsImxvYWRfZGF0YSIsImNhdGNoIiwiX2Vycm9yIiwicmVsb2FkIiwidGhlbiIsIm5ld19kYXRhIiwicGFyc2VJbnQiLCJhbGVydF9hY3RpdmUiLCJkb2N1bWVudCIsIm9udmlzaWJpbGl0eWNoYW5nZSIsInJlYWR5IiwicmF0aW5nIiwidGhpcyIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJjdXJyZW50VGV4dCIsInRseERhdGEiLCJtZW50YWxfZGVtYW5kIiwiaHVycmllZF9kZW1hbmQiLCJwZXJmb3JtYW5jZSIsImVmZm9ydCIsImZydXN0cmF0aW9uIiwidGx4IiwicTEiLCJxMiIsInEzIiwidmFsaWQiLCJxdWFsaXRhdGl2ZSIsInRvRml4ZWQiXSwic291cmNlUm9vdCI6IiJ9