(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";async function e(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"vlm-rationales-study/"+e.url_data.study_id,uid:globalThis.uid+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}var n=!1,i=[];let o=-1,s=null,a=-1,r=-1,u=-1,l=-1,d=0,_=0,c=20,h=0,b=0,w=0;function p(t){a=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function m(t){r=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),$("#ai_explanation_quality_div").show()}function x(t){u=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function g(){const t=$("input[name='latexExperience']:checked").val(),e=$("input[name='latexFrequency']:checked").val(),n=$("input[name='chatbotFrequency']:checked").val();return t&&e&&n?($("#button_instructions_next").show(),!0):($("#button_instructions_next").hide(),!1)}function v(t){b+=t,0==b?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),4!=b||g()?($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show()):($("#button_instructions_next").attr("disabled","true"),$("#button_instructions_next").hide()),b>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==b&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),q()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${b}`).show()}function y(t){return 2!=t?t==1-s.prediction_is_correct?1:0:-1}function q(){if($("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#button_withexplanation_usertrusts").removeAttr("activedecision"),$("#button_withexplanation_usertrusts").removeAttr("disabled"),$("#button_withexplanation_userdistrusts").removeAttr("activedecision"),$("#button_withexplanation_userdistrusts").removeAttr("disabled"),$("#button_withexplanation_userunsure").removeAttr("activedecision"),$("#button_withexplanation_userunsure").removeAttr("disabled"),$("#button_withexplanationquality_usertrusts").removeAttr("activedecision"),$("#button_withexplanationquality_usertrusts").removeAttr("disabled"),$("#button_withexplanationquality_userdistrusts").removeAttr("activedecision"),$("#button_withexplanationquality_userdistrusts").removeAttr("disabled"),$("#button_withexplanationquality_userunsure").removeAttr("activedecision"),$("#button_withexplanationquality_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),o+=1,o>=i.length)return $("#main_box_experiment").hide(),void $("#qualitative_section").show();s=i[o],$("#part1").show(),$("#part2").hide(),s.image?$("#question_image").attr("src","data:image/png;base64,"+s.image):$("#question_image").attr("src","");let t="";s.token_info&&Array.isArray(s.token_info)&&(t=s.token_info.filter((t=>"<|im_end|>"!==t.token)).map((t=>{let e=t.token.replace(/Ġ/g," "),n=1-(t.top_5_tokens&&t.top_5_tokens[0]&&"number"==typeof t.top_5_tokens[0].probability?t.top_5_tokens[0].probability:1);return 1==s.is_highlighted?`<span style="background-color: rgba(255, 0, 0, ${n});">${e}</span>`:e})).join("")),$("#predicted_text").html(t),1==s.is_highlighted?$("#predicted_text_container strong").addClass("highlighted-title"):$("#predicted_text_container strong").removeClass("highlighted-title");let e="";s.token_info&&Array.isArray(s.token_info)&&(e=s.token_info.map((t=>t.token)).filter((t=>"<|im_end|>"!==t)).map((t=>t.replace(/Ġ/g," "))).join("")),$("#token_input").val(e),$("#progress").text(`Progress: ${o+1} / ${i.length}`),$("#token_input_container").hide(),$("#button_next_part1").hide(),clearTimeout(d),d=window.setTimeout(E,2e4),c=20,$("#timer").text(c),$("#timer").show(),_&&clearInterval(_),_=window.setInterval((()=>{c-=1,$("#timer").text(c),c<=15&&($("#token_input_container").show(),$("#button_next_part1").show()),c<=0&&(clearInterval(_),E(),$("#timer").hide())}),1e3)}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>p(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>p(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>p(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>m(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>m(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>m(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>x(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>x(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>x(2))),$("#button_instructions_next").on("click",(()=>v(1))),$("#button_instructions_prev").on("click",(()=>v(-1))),$("#button_next").on("click",(()=>{let t=h;if(function(){if(2!=u){let t=1-s.prediction_is_correct;u==t&&(h+=.1)}}(),-1!=o){let n={question_i:o,user_selections:{answeronly:a,withexplanation:r,withexplanationquality:u},user_is_correct:{answeronly:y(a),withexplanation:y(r),withexplanationquality:y(u)},balance:{old:t,new:h}};n.question=s,n.count_exited_page=w,e(n),w=0}q()}));const f=new URLSearchParams(window.location.search),k=f.get("start"),A=f.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(f.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=A){if(globalThis.uid=A,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${f.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(n=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{i=t,null!=k&&(o=parseInt(k)-1,console.log("Starting from",o)),v(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let T=!1;function E(){clearInterval(_),$("#timer").hide(),$("#part1").hide(),$("#part2").show()}document.onvisibilitychange=()=>{T||(w+=1,T=!0,T=!1)},$(document).ready((()=>{$("#button_next_part1").on("click",(()=>{clearTimeout(d),$("#timer").hide(),$("#part1").hide(),$("#part2").show()})),$(".confidence-button").on("click",(function(){let t=parseInt($(this).attr("data-rating"));$(".confidence-button").removeClass("selected"),$(this).addClass("selected"),l=t,$("#button_next_part2").removeAttr("disabled")})),$("#button_next_part2").on("click",(()=>{e({question_i:o,confidence_rating:l}),$("#button_next_part2").attr("disabled","true"),$(".confidence-button").removeClass("selected"),l=-1,$("#part2").hide(),$("#part1").show(),q()})),$("input[name='latexExperience'], input[name='latexFrequency'], input[name='chatbotFrequency']").on("change",(()=>{g()&&($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show())}))})),$("#qual_next").on("click",(()=>{const t=$("#qual_q1").val()||"",i=$("#qual_q2").val()||"",s=$("#qual_q3").val()||"";let a=!0;t.length<25?($("#warn_q1").show(),a=!1):$("#warn_q1").hide(),i.length<25?($("#warn_q2").show(),a=!1):$("#warn_q2").hide(),s.length<0?($("#warn_q3").show(),a=!1):$("#warn_q3").hide(),a&&(e({qualitative:{q1:t,q2:i,q3:s}}),$("#qualitative_section").hide(),n?($("#reward_box_mock").text(`Your total reward is $${h.toFixed(2)} (${o} questions answered) + $2.`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${h.toFixed(2)} (${o} questions answered) + $2.`),$("#reward_box").show(),$("#main_box_end").show()))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,