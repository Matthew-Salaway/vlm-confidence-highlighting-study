(()=>{"use strict";let t="https://matthewsalaway.pythonanywhere.com/";async function e(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"ocr-calibration-study/"+e.url_data.study_id,uid:globalThis.uid+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}var n=!1,i=[];let o=null,a=-1,r=0,s=0,l=20,c=0,d=0,_=0,u=0,p=0;function h(){const t=$("input[name='latexExperience']:checked").val(),e=$("input[name='latexFrequency']:checked").val(),n=$("input[name='chatbotFrequency']:checked").val();return t&&e&&n?($("#button_instructions_next").show(),!0):($("#button_instructions_next").hide(),!1)}function g(t){u+=t,0==u?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),4!=u||h()?($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show()):($("#button_instructions_next").attr("disabled","true"),$("#button_instructions_next").hide()),u>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==u&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),v()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${u}`).show()}function m(t){return 2!=t?t==1-o.prediction_is_correct?1:0:-1}$("#button_instructions_next").on("click",(()=>g(1))),$("#button_instructions_prev").on("click",(()=>g(-1))),$("#button_next").on("click",(()=>{let t=_;if(-1==1-o.prediction_is_correct&&(_+=.1),d>0){let n={question_i:d,user_selections:{answeronly:-1,withexplanation:-1,withexplanationquality:-1},user_is_correct:{answeronly:m(-1),withexplanation:m(-1),withexplanationquality:m(-1)},balance:{old:t,new:_}};n.question=o,n.count_exited_page=p,e(n),p=0}v()}));let b=[],x=0;function f(t){$("#practice_container").empty().show();const e=$('\n      <div id="practice_inner_container" style="padding: 20px; padding-top:0px; overflow-y: auto;">\n        <div id="practice_header"></div>\n        <div id="practice_content" style="margin-top: 10px;"></div>\n        <div id="practice_nav" style="margin-top: 20px; margin-bottom: 25px;"></div>\n      </div>\n    ');$("#practice_container").append(e),$("#practice_header").html(`<h2>Practice Round (${x+1} of ${b.length})</h2>`),$("#practice_content").html('\n      <div id="practice_question_display" style="margin-top: 10px;">\n        <img id="practice_question_image" src="" alt="Practice Question Image" style="max-width: 100%; height: 110px; object-fit: contain;margin-top: 20px;">\n        <div id="practice_predicted_text_container" style="margin-top: 20px;">\n          <div style="margin-top: 10px;">Predicted Text:</div>\n          <div id="practice_predicted_text" style="margin-top: 20px;"></div>\n        </div>\n        <div id="practice_token_input_container" style="margin-top: 20px;">\n          <input id="practice_token_input" type="text" style="width: 100%; font-size: 16px; padding: 8px;">\n        </div>\n      </div>\n    ');const n=b[x];n.image?$("#practice_question_image").attr("src","data:image/png;base64,"+n.image):$("#practice_question_image").attr("src","");let o="";n.token_info&&Array.isArray(n.token_info)&&(o=n.token_info.filter((t=>"<|im_end|>"!==t.token)).map((t=>{const e=t.token.replace(/Ġ/g," "),n=t.top_5_tokens&&t.top_5_tokens[0]&&"number"==typeof t.top_5_tokens[0].probability?t.top_5_tokens[0].probability:1;return"highlighted"===i[c].condition?`<span style="background-color: rgba(255, 0, 0, ${1-n});">${e}</span>`:e})).join("")),$("#practice_predicted_text").html(o);let a="";n.token_info&&Array.isArray(n.token_info)&&(a=n.token_info.map((t=>t.token)).filter((t=>"<|im_end|>"!==t)).map((t=>t.replace(/Ġ/g," "))).join("")),$("#practice_token_input").val(a),$("#practice_nav").html('\n      <div>\n        <input id="practice_prev" type="button" value="Previous Example">\n        <input id="practice_next" type="button" value="Next Example" style="margin-left: 10px;">\n      </div>\n    '),$("#practice_prev").off("click").on("click",(()=>{x=(x-1+b.length)%b.length,f(t)})),$("#practice_next").off("click").on("click",(()=>{x=(x+1)%b.length,f(t)}))}function v(){if($("#main_box_experiment").show(),$("#button_next").hide(),$("#button_quit").hide(),console.log("question index, condition index",d,c),c>=i.length)return $("#main_box_experiment").hide(),void $("#qualitative_section").show();let t=i[c];if(console.log("Condition block",t),console.log(i),0===d)return void function(t){$("#main_box_experiment").hide(),$("#start_condition_page").empty().show();const e=`\n      <div style="display: flex; justify-content: space-between; align-items: center;">\n          <h2 style="margin: 0;">${"highlighted"===t?"Uncertainty Highlighted Section":"Non-Highlighted Section"}</h2>\n          <input id="start_condition_next" type="button" value="Start Experiment" style="margin: 0;"/>\n      </div>\n    `;$("#start_condition_page").append(e),0===$("#practice_container").length&&$("#start_condition_page").append('<div id="practice_container" style="margin-top:10px;"></div>'),new Promise(((t,e)=>{$.getJSON("practice_questions/Qwen_practice_Qs.json").done((e=>t(e))).fail(((t,n,i)=>e(i)))})).then((t=>{b=t,console.log("Practice questions loaded:",b),x=0,f((()=>{d=1,v()}))})).catch((t=>{console.error("Error loading practice questions:",t)})),$("#start_condition_next").on("click",(()=>{$("#start_condition_page").hide(),d=1,v()}))}(t.condition);if(d>t.questions.length)return void function(){$("#main_box_experiment").hide();const t=i[c].condition;$("#condition_label").text(t),$("#mental_demand").val("0"),$("#hurried_demand").val("0"),$("#performance").val("0"),$("#effort").val("0"),$("#frustration").val("0"),$("#nasa_tlx_survey").show()}(t.condition);o=t.questions[d-1],console.log("Question",d,o),o.image?$("#question_image").attr("src","data:image/png;base64,"+o.image):$("#question_image").attr("src","");let e="";o.token_info&&Array.isArray(o.token_info)&&(e=o.token_info.filter((t=>"<|im_end|>"!==t.token)).map((t=>{let e=t.token.replace(/Ġ/g," "),n=1-(t.top_5_tokens&&t.top_5_tokens[0]&&"number"==typeof t.top_5_tokens[0].probability?t.top_5_tokens[0].probability:1);return"highlighted"==i[c].condition?`<span style="background-color: rgba(255, 0, 0, ${n});">${e}</span>`:e})).join("")),$("#predicted_text").html(e);let n="";o.token_info&&Array.isArray(o.token_info)&&(n=o.token_info.map((t=>t.token)).filter((t=>"<|im_end|>"!==t)).map((t=>t.replace(/Ġ/g," "))).join("")),$("#token_input").val(n),$("#progress").text(`Section ${c+1} of ${i.length} | Question ${d} of ${t.questions.length}`),$("#part1").show(),$("#part2").hide(),$("#token_input_container").hide(),$("#button_next_part1").hide(),clearTimeout(r),r=window.setTimeout(T,2e4),l=20,$("#timer").text(l),$("#timer").show(),s&&clearInterval(s),s=window.setInterval((()=>{l-=1,$("#timer").text(l),l<=15&&($("#token_input_container").show(),$("#button_next_part1").show()),l<=0&&(clearInterval(s),T(),$("#timer").hide())}),1e3)}const y=new URLSearchParams(window.location.search),w=y.get("start"),k=y.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(y.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=k){if(globalThis.uid=k,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${y.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(n=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{i=t,null!=w&&(d=parseInt(w)-1,console.log("Starting from",d)),g(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let q=!1;function T(){clearInterval(s),$("#timer").hide(),$("#part1").hide(),$("#part2").show()}document.onvisibilitychange=()=>{q||(p+=1,q=!0,q=!1)},$(document).ready((()=>{$("#button_next_part1").on("click",(()=>{clearTimeout(r),$("#timer").hide(),$("#part1").hide(),$("#part2").show()})),$(".confidence-button").on("click",(function(){let t=parseInt($(this).attr("data-rating"));$(".confidence-button").removeClass("selected"),$(this).addClass("selected"),a=t,$("#button_next_part2").removeAttr("disabled")})),$("#button_next_part2").on("click",(()=>{e({question_i:d,condition_i:c,confidence_rating:a}),$("#button_next_part2").attr("disabled","true"),$(".confidence-button").removeClass("selected"),a=-1,$("#part2").hide(),$("#part1").show(),d++,v()})),$("input[name='latexExperience'], input[name='latexFrequency'], input[name='chatbotFrequency']").on("change",(()=>{h()&&($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show())})),$("#token_input").on("input",(function(){let t=$(this).val();console.log("User input:",t)}));const t={mental_demand:!1,hurried_demand:!1,performance:!1,effort:!1,frustration:!1};function n(){return Object.values(t).every((t=>!0===t))}const i=$("#nasa_tlx_next");i.prop("disabled",!0),$(".nasa-tlx-range").on("input",(function(){const e=$(this).attr("id");e in t&&("0"!==$(this).val()&&(t[e]=!0),n()&&i.prop("disabled",!1))})),i.on("click",(()=>{if(!n())return void alert("Please adjust all sliders before continuing.");const o=$("#mental_demand").val()||"0",a=$("#hurried_demand").val()||"0",r=$("#performance").val()||"0",s=$("#effort").val()||"0",l=$("#frustration").val()||"0",_={mental_demand:parseInt(o),hurried_demand:parseInt(a),performance:parseInt(r),effort:parseInt(s),frustration:parseInt(l)};e({condition:$("#condition_label").text(),tlx:_}),function(){for(let e in t)t[e]=!1;$(".nasa-tlx-range").val("0"),i.prop("disabled",!0)}(),$("#nasa_tlx_survey").hide(),c++,d=0,v()}))})),$("#qual_next").on("click",(()=>{const t=$("#qual_q1").val()||"",i=$("#qual_q2").val()||"",o=$("#qual_q3").val()||"";let a=!0;t.length<25?($("#warn_q1").show(),a=!1):$("#warn_q1").hide(),i.length<25?($("#warn_q2").show(),a=!1):$("#warn_q2").hide(),o.length<0?($("#warn_q3").show(),a=!1):$("#warn_q3").hide(),a&&(e({qualitative:{q1:t,q2:i,q3:o}}),$("#qualitative_section").hide(),n?($("#reward_box_mock").text("Your total reward is $3.00."),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text("Your total reward is $3.00."),$("#reward_box").show(),$("#main_box_end").show()))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,