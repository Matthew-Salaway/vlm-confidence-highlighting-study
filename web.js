(()=>{"use strict";let t="https://matthewsalaway.pythonanywhere.com/";async function e(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"ocr-calibration-study/"+e.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}function n(t){let e=t.replace(/\s+/g,"");return e=e.replace(/\\/g," \\"),e=e.replace(/([\+\-\=])/g," $1 "),e=e.replace(/(\\?)(div|approx|times|Delta)(?!\s)/g,"$1$2 "),e=e.replace(/\s+/g," "),e}var i=!1,o=[];let a=null,r=-1,s=0,l=20,c=0,d=0,u=!1,_=Date.now(),p=[],h="",m=0,g=0;function b(){const t=$("input[name='latexExperience']:checked").val(),e=$("input[name='latexFrequency']:checked").val(),n=$("input[name='chatbotFrequency']:checked").val();return t&&e&&n?($("#button_instructions_next").show(),!0):($("#button_instructions_next").hide(),!1)}function f(t,e){const n=((Date.now()-_)/1e3).toFixed(3),i=d,a=o[c].condition,r=$("#token_input").val();let s={event:t,qid:i,condition:a,condition_index:c,precise_time:n,new_text:r,old_text:h,key_pressed:e||null};h=r,p=p.concat([s])}function x(t){m+=t,0==m?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),3!=m||b()?($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show()):($("#button_instructions_next").attr("disabled","true"),$("#button_instructions_next").hide()),m>=4?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),5==m&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),u||(e({pre_survey:{latexExperience:$("input[name='latexExperience']:checked").val(),latexFrequency:$("input[name='latexFrequency']:checked").val(),chatbotFrequency:$("input[name='chatbotFrequency']:checked").val()}}),u=!0),k()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${m}`).show()}$("#button_instructions_next").on("click",(()=>x(1))),$("#button_instructions_prev").on("click",(()=>x(-1)));let y=[],v=0;function w(t){$("#practice_container").empty().show();const e=$('\n      <div id="practice_inner_container" style="padding: 20px; padding-top:0px; overflow-y: auto;">\n        <div id="practice_instructions"></div>\n        <div id="practice_header"></div>\n        <div id="practice_content" style="margin-top: 10px;"></div>\n        <div id="practice_nav" style="margin-top: 20px; margin-bottom: 25px;"></div>\n      </div>\n    ');$("#practice_container").append(e),$("#practice_header").html(`<h3>Practice Example (${v+1} of ${y.length})</h3>`);const i=o[c].condition,a=[];"highlighted"===i?(a.push("You will be able to see if the model is uncertain about any part of the transcription."),a.push("The text is red if the model is uncertain about it. The brighter the red highlight, the more uncertain the model is about that specific part of the text.")):a.push("You will <b>not</b> be able to see if the model is uncertain about any part of the transcription."),a.push("Review the transcription carefully and fix any errors by editing the input box."),a.push("When the session starts, you will have 20 seconds to modify each transcription.");const r=a.map((t=>`<li>${t}</li>`)).join("");$("#practice_instructions").html(`\n    <h3 style="font-size: 1.1em; margin-bottom: 5px;">Instructions:</h3>\n    <ul style="margin-left: 20px;">\n        ${r}\n    </ul>\n    `),$("#practice_content").html('\n      <div id="practice_question_display" style="margin-top: 10px;">\n        <img id="practice_question_image" src="" alt="Practice Question Image" style="max-width: 100%; height: 110px; object-fit: contain;margin-top: 20px;">\n        <div id="practice_predicted_text_container" style="margin-top: 20px;">\n          <div style="margin-top: 10px;">Predicted Text:</div>\n          <div id="practice_predicted_text" style="margin-top: 20px;"></div>\n        </div>\n        <div id="practice_token_input_container" style="margin-top: 20px;">\n          <input id="practice_token_input" type="text" style="width: 100%; font-size: 16px; padding: 8px;">\n        </div>\n      </div>\n    ');const s=y[v];s.image?$("#practice_question_image").attr("src","data:image/png;base64,"+s.image):$("#practice_question_image").attr("src","");let l="";if(s.token_info&&Array.isArray(s.token_info)&&(l=s.token_info.map((t=>t.token)).filter((t=>"<|im_end|>"!==t)).map((t=>t.replace(/Ġ/g," "))).join("")),$("#practice_token_input").val(n(l)),"non-highlighted"==o[c].condition)$("#practice_predicted_text").html(n(l));else if("highlighted"==o[c].condition){let t="";s.token_info&&Array.isArray(s.token_info)&&(t=s.token_info.filter((t=>"<|im_end|>"!==t.token)).map((t=>{let e=t.token.replace(/Ġ/g," ");return`<span style="background-color: rgba(255, 0, 0, ${1-(t.top_5_tokens&&t.top_5_tokens[0]&&"number"==typeof t.top_5_tokens[0].probability?t.top_5_tokens[0].probability:1)});">${n(e)}</span>`})).join("")),$("#practice_predicted_text").html(t)}if("highlighted"===i){let t="";0===v?t="The model is uncertain about the text '\\boxed'":1===v?t="the model shows no uncertainty (i.e. it is confident about the full transcription)":2===v&&(t="The model is uncertain about three characters"),$("#practice_predicted_text").append(`<span style="font-style: italic; margin-left: 20px; vertical-align: middle;">${t}</span>`)}$("#practice_nav").html('\n      <div>\n        <input id="practice_prev" type="button" value="Previous Example">\n        <input id="practice_next" type="button" value="Next Example" style="margin-left: 10px;">\n      </div>\n    '),$("#practice_prev").off("click").on("click",(()=>{v=(v-1+y.length)%y.length,w(t)})),$("#practice_next").off("click").on("click",(()=>{v=(v+1)%y.length,w(t)}))}function k(){if($("#main_box_experiment").show(),$("#button_next").hide(),$("#button_quit").hide(),p=[],c>=o.length)return $("#main_box_experiment").hide(),void $("#qualitative_section").show();let t=o[c];if(0===d)return void function(t){$("#main_box_experiment").hide(),$("#start_condition_page").empty().show();const e=`\n      <div style="display: flex; justify-content: space-between; align-items: center;">\n          <h2 style="margin: 0;">${"highlighted"===t?`Part ${c+1}: AI Uncertainty is Highlighted`:`Part ${c+1}: AI Uncertainty is Not Highlighted`}</h2>\n          <input id="start_condition_next" type="button" value="Start Section" style="margin: 0;"/>\n      </div>\n    `;$("#start_condition_page").append(e),0===$("#practice_container").length&&$("#start_condition_page").append('<div id="practice_container" style="margin-top:10px;"></div>'),new Promise(((t,e)=>{$.getJSON("practice_questions/Qwen_practice_Qs.json").done((e=>t(e))).fail(((t,n,i)=>e(i)))})).then((t=>{y=t,v=0,w((()=>{d=1,k()}))})).catch((t=>{})),$("#start_condition_next").on("click",(()=>{$("#start_condition_page").hide(),d=1,k()}))}(t.condition);if(d>t.questions.length)return void function(){$("#main_box_experiment").hide();const t=o[c].condition;$("#condition_label").text(t),$("#mental_demand").val("0"),$("#hurried_demand").val("0"),$("#performance").val("0"),$("#effort").val("0"),$("#frustration").val("0"),$("#nasa_tlx_survey").show()}(t.condition);a=t.questions[d-1],a.image?$("#question_image").attr("src","data:image/png;base64,"+a.image):$("#question_image").attr("src","");let e="";if(a.token_info&&Array.isArray(a.token_info)&&(e=a.token_info.map((t=>t.token)).filter((t=>"<|im_end|>"!==t)).map((t=>t.replace(/Ġ/g," "))).join("")),$("#token_input").val(n(e)),h=$("#token_input").val()||"","non-highlighted"==o[c].condition)$("#predicted_text").html(n(e));else if("highlighted"==o[c].condition){let t="";a.token_info&&Array.isArray(a.token_info)&&(t=a.token_info.filter((t=>"<|im_end|>"!==t.token)).map((t=>{let e=t.token.replace(/Ġ/g," ");return`<span style="background-color: rgba(255, 0, 0, ${1-(t.top_5_tokens&&t.top_5_tokens[0]&&"number"==typeof t.top_5_tokens[0].probability?t.top_5_tokens[0].probability:1)});">${n(e)}</span>`})).join("")),$("#predicted_text").html(t)}$("#progress").text(`Section ${c+1} of ${o.length} | Question ${d} of ${t.questions.length}`),$("#part1").show(),$("#part2").hide(),$("#token_input_container").hide(),$("#button_next_part1").hide(),_=Date.now(),l=20,$("#timer").text(l),$("#timer").show(),s&&clearInterval(s),s=window.setInterval((()=>{l-=1,$("#timer").text(l),l<=15&&($("#token_input_container").show(),$("#button_next_part1").show()),l<=0&&(clearInterval(s),f("auto_submit"),clearInterval(s),$("#timer").hide(),$("#part1").hide(),$("#part2").show(),$("#timer").hide())}),1e3)}const q=new URLSearchParams(window.location.search),T=q.get("start"),j=q.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(q.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=j){if(globalThis.uid=j,"prolific_random"==globalThis.uid){let t=`${Math.floor(4*Math.random())}`.padStart(3,"0");globalThis.uid=`${q.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(i=!0),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{window.location.reload()})).then((t=>{o=t,null!=T&&(d=parseInt(T)-1),x(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()}));let A=!1;document.onvisibilitychange=()=>{A||(g+=1,A=!0,A=!1)},$(document).ready((()=>{$("#button_next_part1").on("click",(()=>{f("next_button_submitted"),clearInterval(s),$("#timer").hide(),$("#part1").hide(),$("#part2").show()})),$(".confidence-button").on("click",(function(){let t=parseInt($(this).attr("data-rating"));$(".confidence-button").removeClass("selected"),$(this).addClass("selected"),r=t,$("#button_next_part2").removeAttr("disabled")})),$("#button_next_part2").on("click",(()=>{e({question_i:d,qid:a.qid,condition:o[c].condition,confidence_rating:r,keylogs:p}),$("#button_next_part2").attr("disabled","true"),$(".confidence-button").removeClass("selected"),r=-1,$("#part2").hide(),$("#part1").show(),d++,k()})),$("input[name='latexExperience'], input[name='latexFrequency'], input[name='chatbotFrequency']").on("change",(()=>{b()&&($("#button_instructions_next").removeAttr("disabled"),$("#button_instructions_next").show())})),$("#token_input").on("keydown",(function(t){f("input_change",t.key)}));const t={mental_demand:!1,hurried_demand:!1,performance:!1,effort:!1,frustration:!1},n={mental_demand:null,hurried_demand:null,performance:null,effort:null,frustration:null};function i(){return Object.values(t).every((t=>!0===t))}const l=$("#nasa_tlx_next");l.prop("disabled",!0),$(".tlx-box").on("click",(function(){const e=$(this).parent().attr("id");if(!e||!(e in t))return;const o=parseInt($(this).attr("data-value"));n[e]=o,t[e]=!0,$(this).siblings().removeClass("selected"),$(this).addClass("selected"),i()&&l.prop("disabled",!1)})),l.on("click",(()=>{if(!i())return void alert("Please adjust all sliders before continuing.");const o={mental_demand:null!==n.mental_demand?n.mental_demand:0,hurried_demand:null!==n.hurried_demand?n.hurried_demand:0,performance:null!==n.performance?n.performance:0,effort:null!==n.effort?n.effort:0,frustration:null!==n.frustration?n.frustration:0};e({condition:$("#condition_label").text(),condition_index:c,tlx:o}),function(){for(let e in t)t[e]=!1;for(let t in n)n[t]=null;$(".tlx-box").removeClass("selected"),l.prop("disabled",!0)}(),$("#nasa_tlx_survey").hide(),c++,d=0,k()}))})),$("#qual_next").on("click",(()=>{const t=$("#qual_q1").val()||"",n=$("#qual_q2").val()||"",o=$("#qual_q3").val()||"";let a=!0;t.length<25?($("#warn_q1").show(),a=!1):$("#warn_q1").hide(),n.length<25?($("#warn_q2").show(),a=!1):$("#warn_q2").hide(),o.length<0?($("#warn_q3").show(),a=!1):$("#warn_q3").hide(),a&&(e({qualitative:{q1:t,q2:n,q3:o}}),$("#qualitative_section").hide(),i?($("#reward_box_mock").text("Your total reward is $3.00."),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text("Your total reward is $3.00."),$("#reward_box").show(),$("#main_box_end").show()))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,